---
swagger: "2.0"
schemes:
  - "http"
  - "https"
produces:
  - "application/json"
  - "text/plain"
consumes:
  - "application/json"
  - "text/plain"
basePath: "/v1.24"
info:
  title: "Pouch Engine API"
  version: "1.24"
  description: |
    API is an HTTP API served by Pouch Engine.

produces:
        - "application/json"
paths:
  /_ping:
    get:
      summary: ""
      description: ""
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            example: "OK"
        500:
          description: "server error"
          schema:
            $ref: '#/definitions/Error'

  /version:
    get:
      summary: "Get Pouchd version"
      description: ""
      responses:
        200:
          schema:
            $ref: '#/definitions/SystemVersion'
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: '#/definitions/Error'

  /info:
    get:
      summary: "Get System information"
      description: ""
      responses:
        200:
          schema:
            $ref: '#/definitions/SystemInfo'
          description: "no error"
        500:
          schema:
            $ref: '#/definitions/Error'
          description: "server error"

  /images/create:
    post:
      summary: "Create an image by pulling from a registry or importing from an existing source file"
      consumes:
        - "text/plain"
        - "application/octet-stream"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
        404:
          schema:
            $ref: '#/definitions/Error'
          description: "image not found"
        500:
          schema:
            $ref: '#/definitions/Error'
          description: "server error"
      parameters:
        - name: "fromImage"
          in: "query"
          description: "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed."
          type: "string"
        - name: "fromSrc"
          in: "query"
          description: "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image."
          type: "string"
        - name: "repo"
          in: "query"
          description: "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image."
          type: "string"
        - name: "tag"
          in: "query"
          description: "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled."
          type: "string"
        - name: "inputImage"
          in: "body"
          description: "Image content if the value `-` has been specified in fromSrc query parameter"
          schema:
            type: "string"
          required: false
        - name: "X-Registry-Auth"
          in: "header"
          description: "A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)"
          type: "string"

  /images/{name}/json:
    get:
      summary: "Inspect a image"
      description: "Return the information about image"
      operationId: "ImageInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/ImageInfo"
          examples:
            application/json:
              CreatedAt: "2017-12-19 15:32:09"
              Digest: "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"
              ID: "e216a057b1cb"
              Name: "ubuntu:12.04"
              Size: 103579269
              Tag: "12.04"
        404:
          description: "no such image"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such image: e216a057b1cb"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or id"
          type: "string"
          required: true

  /images/json:
    get:
      summary: "List Images"
      description: "Return a list of stored images."
      operationId: "ImageList"
      produces:
        - "application/json"
      responses:
        200:
          description: "Summary image data for the images matching the query"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageInfo"
          examples:
            application/json:
              - Id: "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"
                ParentId: ""
                RepoTags:
                  - "ubuntu:12.04"
                  - "ubuntu:precise"
                RepoDigests:
                  - "ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787"
                Created: 1474925151
                Size: 103579269
                VirtualSize: 103579269
                SharedSize: 0
                Labels: {}
                Containers: 2
              - Id: "sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175"
                ParentId: ""
                RepoTags:
                  - "ubuntu:12.10"
                  - "ubuntu:quantal"
                RepoDigests:
                  - "ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7"
                  - "ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3"
                Created: 1403128455
                Size: 172064416
                VirtualSize: 172064416
                SharedSize: 0
                Labels: {}
                Containers: 5
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "all"
          in: "query"
          description: "Show all images. Only images from a final layer (no children) are shown by default."
          type: "boolean"
          default: false
        - name: "filters"
          in: "query"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

            - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
            - `dangling=true`
            - `label=key` or `label="key=value"` of an image label
            - `reference`=(`<image-name>[:<tag>]`)
            - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
          type: "string"
        - name: "digests"
          in: "query"
          description: "Show digest information as a `RepoDigests` field on each image."
          type: "boolean"
          default: false

  /images/search:
    get:
      summary: "Search images"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SearchResultItem"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"

  /images/{name}:
    delete:
      summary: "Remove an image"
      description: "Remove an image by reference."
      parameters:
        - name: name
          in: path
          required: true
          description: "Image reference"
          type: string
      responses:
        204:
          description: "No error"
        404:
          description: "no such image"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such image: c2ada9df5af8"
        500:
          schema:
            $ref: "#/definitions/Error"
          description: "Server deletes an image error"

  /containers/create:
    post:
      summary: "Create a container"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`."
          type: "string"
          pattern: "/?[a-zA-Z0-9_-]+"
        - name: "body"
          in: "body"
          description: "Container to create"
          schema:
            $ref: "#/definitions/ContainerConfigWrapper"
          required: true
      responses:
        201:
          description: "Container created successfully"
          schema:
            $ref: "#/definitions/ContainerCreateResp"
          examples:
            application/json:
              Id: "e90e34656806"
              Warnings: []
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "no such image"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "image: xxx:latest: not found"
        409:
          description: "conflict"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/json:
    get:
      summary: "Inspect a container"
      description: "Return low-level information about a container."
      operationId: "ContainerInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/ContainerJSON"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          type: "string"
        - name: "size"
          in: "query"
          type: "boolean"
          default: false
          description: "Return the size of container as fields `SizeRw` and `SizeRootFs`"
      tags: ["Container"]

  /containers/json:
    get:
      summary: "List containers"
      operationId: "ContainerList"
      produces: ["application/json"]
      responses:
        200:
          description: "Summary containers that matches the query"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Container"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"

  /containers/{id}/rename:
    post:
      summary: "Rename a container"
      operationId: "ContainerRename"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          type: "string"
        - name: "name"
          in: "query"
          required: true
          description: "New name for the container"
          type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "name already in use"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/start:
    post:
      summary: "Start a container"
      operationId: "ContainerStart"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          type: "string"
        - name: "detachKeys"
          in: "query"
          description: "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`."
          type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/stop:
    post:
      summary: "Stop a container"
      operationId: "ContainerStop"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          type: "string"
        - name: "t"
          in: "query"
          description: "Number of seconds to wait before killing the container"
          type: "integer"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/pause:
    post:
      summary: "Pause a container"
      operationId: "ContainerPause"
      parameters:
        - name : "id"
          in : "path"
          required: true
          description: "ID or name of the container"
          type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/unpause:
    post:
      summary: "Unpause a container"
      operationId: "ContainerUnpause"
      parameters:
        - name : "id"
          in : "path"
          required: true
          description: "ID or name of the container"
          type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{name}:
    delete:
      summary: "Remove one container"
      operationId: "ContainerRemove"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "ID or name of the container"
          type: "string"
        - name: "force"
          in: "query"
          description: "If the container is running, force query is used to kill it and remove it forcefully."
          type: "boolean"
          default: false
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
      tags: ["Container"]

  /containers/{id}/exec:
    post:
      summary: "Create an exec instance"
      description: "Run a command inside a running container."
      operationId: "ContainerExec"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          schema:
            type: "string"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "container is paused"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "body"
          in: "body"
          schema:
            allOf:
              - $ref: "#/definitions/ExecConfig"
          required: true
        - name: "id"
          in: "path"
          description: "ID or name of container"
          type: "string"
          required: true
      tags: ["Exec"]

  /exec/{id}/start:
    post:
      summary: "Start an exec instance"
      description: "Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command."
      operationId: "ExecStart"
      consumes:
        - "application/json"
      produces:
        - "application/vnd.raw-stream"
      responses:
        200:
          description: "No error"
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Container is stopped or paused"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "execStartConfig"
          in: "body"
          schema:
            type: "object"
            properties:
              Detach:
                type: "boolean"
                description: "Detach from the command."
              Tty:
                type: "boolean"
                description: "Allocate a pseudo-TTY."
            example:
              Detach: false
              Tty: false
        - name: "id"
          in: "path"
          description: "Exec instance ID"
          required: true
          type: "string"
      tags: ["Exec"]

  /volumes:
    get:
      summary: "List volumes"
      operationId: "VolumeList"
      produces: ["application/json"]
      responses:
        200:
          description: "Summary volume data that matches the query"
          schema:
            $ref: "#/definitions/VolumeListResp"
          examples:
            application/json:
              Volumes:
                - CreatedAt: "2017-07-19T12:00:26Z"
                  Name: "tardis"
                  Driver: "local"
                  Mountpoint: "/var/lib/pouch/volumes/tardis"
                  Labels:
                    com.example.some-label: "some-value"
                    com.example.some-other-label: "some-other-value"
                  Scope: "local"
                  Options:
                    device: "tmpfs"
                    o: "size=100m,uid=1000"
                    type: "tmpfs"
              Warnings: []
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            JSON encoded value of the filters (a `map[string][]string`) to
            process on the volumes list. Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               volumes that are not in use by a container. When set to `false`
               (or `0`), only volumes that are in use by one or more
               containers are returned.
            - `driver=<volume-driver-name>` Matches volumes based on their driver.
            - `label=<key>` or `label=<key>:<value>` Matches volumes based on
               the presence of a `label` alone or a `label` and a value.
            - `name=<volume-name>` Matches all or part of a volume name.
          type: "string"
          format: "json"
      tags: ["Volume"]

  /volumes/create:
    post:
      summary: "Create a volume"
      operationId: "VolumeCreate"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses:
        201:
          description: "The volume was created successfully"
          schema:
            $ref: "#/definitions/VolumeInfo"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - name: "VolumeConfig"
          in: "body"
          required: true
          description: "Volume configuration"
          schema:
            $ref: "#/definitions/VolumeConfig"
      tags: ["Volume"]

definitions:
  Error:
    type: "object"
    properties:
      message:
        type: string

  SystemVersion:
    type: "object"
    properties:
      Version:
        type: "string"
        description: "version of Pouch Daemon"
        example: "0.1.2"
      ApiVersion:
        type: "string"
        description: "Api Version held by daemon"
        example: ""
      GitCommit:
        type: "string"
        description: "Commit ID held by the latest commit operation"
        example: ""
      GoVersion:
        type: "string"
        description: "version of Go runtime"
        example: "1.8.3"
      Os:
        type: "string"
        description: "Operating system type of underlying system"
        example: "linux"
      Arch:
        type: "string"
        description: "Arch type of underlying hardware"
        example: "amd64"
      KernelVersion:
        type: "string"
        description: "Operating system kernel version"
        example: "3.13.0-106-generic"
      BuildTime:
        type: "string"
        description: "The time when this binary of daemon is built"
        example: "2017-08-29T17:41:57.729792388+00:00"

  SystemInfo:
    type: "object"
    properties:
      Architecture:
        type: "string"
      Containers:
        type: "integer"
      ContainersRunning:
        type: "integer"
      ContainersStopped:
        type: "integer"
      ContainersPaused:
        type: "integer"

  ContainerInfo:
    type: "object"
    properties:
      Id:
        description: "The ID of the container"
        type: "string"
      Created:
        description: "The time the container was created"
        type: "string"
      Path:
        description: "The path to the command being run"
        type: "string"
      Args:
        description: "The arguments to the command being run"
        type: "array"
        items:
          type: "string"
      State:
        $ref: "#/definitions/ContainerState"
      Image:
        description: "The container's image"
        type: "string"
      ResolvConfPath:
        type: "string"
      HostnamePath:
        type: "string"
      HostsPath:
        type: "string"
      LogPath:
        type: "string"
      Node:
        description: "TODO"
        type: "object"
      Name:
        type: "string"
      RestartCount:
        type: "integer"
      Driver:
        type: "string"
      MountLabel:
        type: "string"
      ProcessLabel:
        type: "string"
      AppArmorProfile:
        type: "string"
      ExecIDs:
        type: "string"
      HostConfig:
        $ref: "#/definitions/HostConfig"
      GraphDriver:
        $ref: "#/definitions/GraphDriverData"
      SizeRw:
        description: "The size of files that have been created or changed by this container."
        type: "integer"
        format: "int64"
      SizeRootFs:
        description: "The total size of all the files in this container."
        type: "integer"
        format: "int64"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/MountPoint"
      Config:
        $ref: "#/definitions/ContainerConfig"
      NetworkSettings:
        $ref: "#/definitions/NetworkSettings"

  ContainerConfigWrapper:
    description: | 
      ContainerConfigWrapper is used for API "POST /containers/create".
      It wraps all kinds of config used in container creation.
      It can be used to encode client params in client and unmarshal request body in daemon side.
    allOf:
      - $ref: "#/definitions/ContainerConfig"
      - type: "object"
        properties:
          HostConfig:
            $ref: "#/definitions/HostConfig"
          NetworkingConfig:
            $ref: "#/definitions/NetworkingConfig"

  ContainerConfig:
    type: "object"
    description: "Configuration for a container that is portable between hosts"
    properties:
      Hostname:
        description: "The hostname to use for the container, as a valid RFC 1123 hostname."
        type: "string"
      Domainname:
        description: "The domain name to use for the container."
        type: "string"
      User:
        description: "The user that commands are run as inside the container."
        type: "string"
      AttachStdin:
        description: "Whether to attach to `stdin`."
        type: "boolean"
        default: false
      AttachStdout:
        description: "Whether to attach to `stdout`."
        type: "boolean"
        default: true
      AttachStderr:
        description: "Whether to attach to `stderr`."
        type: "boolean"
        default: true
      ExposedPorts:
        description: "An object mapping ports to an empty object in the form:`{<port>/<tcp|udp>: {}}`"
        type: "object"
        additionalProperties:
          type: "object"
          enum:
            - {}
          default: {}
      Tty:
        description: "Attach standard streams to a TTY, including `stdin` if it is not closed."
        type: "boolean"
        default: false
      OpenStdin:
        description: "Open `stdin`"
        type: "boolean"
        default: false
      StdinOnce:
        description: "Close `stdin` after one attached client disconnects"
        type: "boolean"
        default: false
      Env:
        description: |
          A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
        type: "array"
        items:
          type: "string"
      Cmd:
        description: "Command to run specified an array of strings."
        type: "array"
        items:
          type: "string"
      ArgsEscaped:
        description: "Command is already escaped (Windows only)"
        type: "boolean"
      Image:
        description: "The name of the image to use when creating the container"
        type: "string"
      Volumes:
        description: "An object mapping mount point paths inside the container to empty objects."
        type: "object"
        properties:
          additionalProperties:
            type: "object"
            enum:
              - {}
            default: {}
      WorkingDir:
        description: "The working directory for commands to run in."
        type: "string"
      Entrypoint:
        description: |
          The entry point for the container as a string or an array of strings.
          If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by pouch when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
        type: "array"
        items:
          type: "string"
      NetworkDisabled:
        description: "Disable networking for the container."
        type: "boolean"
      MacAddress:
        description: "MAC address of the container."
        type: "string"
      OnBuild:
        description: "`ONBUILD` metadata that were defined in the image's `Dockerfile`."
        type: "array"
        items:
          type: "string"
      Labels:
        description: "User-defined key/value metadata."
        type: "object"
        additionalProperties:
          type: "string"
      StopSignal:
        description: "Signal to stop a container as a string or unsigned integer."
        type: "string"
        default: "SIGTERM"
      StopTimeout:
        description: "Timeout to stop a container in seconds."
        type: "integer"
        default: 10
      Shell:
        description: "Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell."
        type: "array"
        items:
          type: "string"
  
  ContainerCreateResp:
    description: "response returned by daemon when container create successfully"
    type: "object"
    required: [Id, Warnings]
    properties:
      Id:
        description: "The ID of the created container"
        type: "string"
        x-nullable: false
      Name:
        description: "The name of the created container"
        type: "string"
      Warnings:
        description: "Warnings encountered when creating the container"
        type: "array"
        x-nullable: false
        items:
          type: "string"

  HostConfig:
    description: "Container configuration that depends on the host we are running on"
    allOf:
      - type: "object"
        properties:
          # Applicable to all platforms
          Binds:
            type: "array"
            description: |
              A list of volume bindings for this container. Each volume binding is a string in one of these forms:

              - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
              - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
              - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path.
              - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
            items:
              type: "string"
          ContainerIDFile:
            type: "string"
            description: "Path to a file where the container ID is written"
          LogConfig:
            type: "object"
            description: "The logging configuration for this container"
            properties:
              Type:
                type: "string"
                enum:
                  - "json-file"
                  - "syslog"
                  - "journald"
                  - "gelf"
                  - "fluentd"
                  - "awslogs"
                  - "splunk"
                  - "etwlogs"
                  - "none"
              Config:
                type: "object"
                additionalProperties:
                  type: "string"
          NetworkMode:
            type: "string"
            description: "Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to."
          PortBindings:
            type: "object"
            description: "A map of exposed container ports and the host port they should map to."
            additionalProperties:
              $ref: "#/definitions/PortBinding"
          AutoRemove:
            type: "boolean"
            description: "Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set."
          VolumeDriver:
            type: "string"
            description: "Driver that this container uses to mount volumes."
          VolumesFrom:
            type: "array"
            description: "A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`."
            items:
              type: "string"
          CapAdd:
            type: "array"
            description: "A list of kernel capabilities to add to the container."
            items:
              type: "string"
          CapDrop:
            type: "array"
            description: "A list of kernel capabilities to drop from the container."
            items:
              type: "string"
          Dns:
            type: "array"
            description: "A list of DNS servers for the container to use."
            items:
              type: "string"
          DnsOptions:
            type: "array"
            description: "A list of DNS options."
            items:
              type: "string"
          DnsSearch:
            type: "array"
            description: "A list of DNS search domains."
            items:
              type: "string"
          ExtraHosts:
            type: "array"
            description: |
              A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`.
            items:
              type: "string"
          GroupAdd:
            type: "array"
            description: "A list of additional groups that the container process will run as."
            items:
              type: "string"
          IpcMode:
            type: "string"
            description: |
                    IPC sharing mode for the container. Possible values are:
                    - `"none"`: own private IPC namespace, with /dev/shm not mounted
                    - `"private"`: own private IPC namespace
                    - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                    - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                    - `"host"`: use the host system's IPC namespace
                    If not specified, daemon default is used, which can either be `"private"`
                    or `"shareable"`, depending on daemon version and configuration.
          Cgroup:
            type: "string"
            description: "Cgroup to use for the container."
          Links:
            type: "array"
            description: "A list of links for the container in the form `container_name:alias`."
            items:
              type: "string"
          OomScoreAdj:
            type: "integer"
            description: "An integer value containing the score given to the container in order to tune OOM killer preferences."
            example: 500
          PidMode:
            type: "string"
            description: |
              Set the PID (Process) Namespace mode for the container. It can be either:
              - `"container:<name|id>"`: joins another container's PID namespace
              - `"host"`: use the host's PID namespace inside the container
          Privileged:
            type: "boolean"
            description: "Gives the container full access to the host."
          PublishAllPorts:
            type: "boolean"
            description: "Allocates a random host port for all of a container's exposed ports."
          ReadonlyRootfs:
            type: "boolean"
            description: "Mount the container's root filesystem as read only."
          SecurityOpt:
            type: "array"
            description: "A list of string values to customize labels for MLS systems, such as SELinux."
            items:
              type: "string"
          StorageOpt:
            type: "object"
            description: |
              Storage driver options for this container, in the form `{"size": "120G"}`.
            additionalProperties:
              type: "string"
          Tmpfs:
            type: "object"
            description: |
              A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`.
            additionalProperties:
              type: "string"
          UTSMode:
            type: "string"
            description: "UTS namespace to use for the container."
          UsernsMode:
            type: "string"
            description: "Sets the usernamespace mode for the container when usernamespace remapping option is enabled."
          ShmSize:
            type: "integer"
            description: "Size of `/dev/shm` in bytes. If omitted, the system uses 64MB."
            minimum: 0
          Sysctls:
            type: "object"
            description: |
              A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}`
            additionalProperties:
              type: "string"
          Runtime:
            type: "string"
            description: "Runtime to use with this container."
          # Applicable to Windows
          ConsoleSize:
            type: "array"
            description: "Initial console size, as an `[height, width]` array. (Windows only)"
            minItems: 2
            maxItems: 2
            items:
              type: "integer"
              minimum: 0
          Isolation:
            type: "string"
            description: "Isolation technology of the container. (Windows only)"
            enum:
              - "default"
              - "process"
              - "hyperv"

  Container:
    description: |
      Container contains response of Engine API:
      GET "/containers/json""
    type: "object"
    properties:
      ID:
        type: "string"
      Names:
        type: "array"
        items:
          type: "string"
        example:
          - "container_1"
          - "container_2"
      Image:
        type: "string"
      ImageID:
        type: "string"
      Command:
        type: "string"
      Created:
        type: "string"
      SizeRw:
        type: "integer"
        format: "int64"
      SizeRootFs:
        type: "integer"
        format: "int64"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      State:
        type: "string"
      Status:
        type: "string"
      HostConfig:
        type: "object"
        $ref: '#/definitions/HostConfig'

  NetworkingConfig:
    description: "Configuration for a network used to create a container."
    type: "object"
    properties:
      EndpointsConfig:
        $ref: "#/definitions/EndpointSettings"

  EndpointSettings:
    description: "Configuration for a network endpoint."
    type: "object"
    properties:
      # Configurations
      Links:
        type: "array"
        items:
          type: "string"
        example:
          - "container_1"
          - "container_2"
      Aliases:
        type: "array"
        items:
          type: "string"
        example:
          - "server_x"
          - "server_y"

      # Operational data
      NetworkID:
        description: |
          Unique ID of the network.
        type: "string"
        example: "08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a"
      EndpointID:
        description: |
          Unique ID for the service endpoint in a Sandbox.
        type: "string"
        example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
      Gateway:
        description: |
          Gateway address for this network.
        type: "string"
        example: "172.17.0.1"
      IPAddress:
        description: |
          IPv4 address.
        type: "string"
        example: "172.17.0.4"
      IPPrefixLen:
        description: |
          Mask length of the IPv4 address.
        type: "integer"
        example: 16
      IPv6Gateway:
        description: |
          IPv6 gateway address.
        type: "string"
        example: "2001:db8:2::100"
      GlobalIPv6Address:
        description: |
          Global IPv6 address.
        type: "string"
        example: "2001:db8::5689"
      GlobalIPv6PrefixLen:
        description: |
          Mask length of the global IPv6 address.
        type: "integer"
        format: "int64"
        example: 64
      MacAddress:
        description: |
          MAC address for the endpoint on this network.
        type: "string"
        example: "02:42:ac:11:00:04"
      DriverOpts:
        description: |
          DriverOpts is a mapping of driver options and values. These options
          are passed directly to the driver and are driver specific.
        type: "object"
        x-nullable: true
        additionalProperties:
          type: "string"
        example:
          com.example.some-label: "some-value"
          com.example.some-other-label: "some-other-value"

  ImageInfo:
    description: "An object containing all details of an image at API side"
    type: "object"
    properties:
      ID:
        description: "ID of an image."
        type: "string"
      Name:
        description: "name of an image."
        type: "string"
      Tag:
        description: "tag of an image."
        type: "string"
      Digest:
        description: "digest of image."
        type: "string"
      CreatedAt:
        description: "Time of image creation"
        type: "string"
      Size:
        description: "size of image's taking disk space."
        type: "integer"

  SearchResultItem:
    type: "object"
    description: "search result item in search results."
    properties:
      description:
        type: "string"
        description: "description just shows the description of this image"
      is_official:
        type: "boolean"
        description: "is_official shows if this image is marked official."
      is_automated:
        type: "boolean"
        description: "is_automated means whether this image is automated."
      name:
        type: "string"
        description: "name represents the name of this image"
      star_count:
        type: "integer"
        description: "star_count refers to the star count of this image."

  VolumeInfo:
    type: "object"
    description: "Volume represents the configuration of a volume for the container."
    properties:
      Name:
        description: "Name is the name of the volume."
        type: "string"
      Driver:
        description: "Driver is the Driver name used to create the volume."
        type: "string"
      Mountpoint:
        description: "Mountpoint is the location on disk of the volume."
        type: "string"
      CreatedAt:
        type: "string"
        format: "dateTime"
        description: "Date/Time the volume was created."
      Status:
        description: "Status provides low-level status information about the volume."
        type: "object"
        additionalProperties:
          type: "object"
          enum:
            - {}
          default: {}
      Labels:
        description: "Labels is metadata specific to the volume."
        type: "object"
        additionalProperties:
          type: "string"
      Scope:
        description: |
          Scope describes the level at which the volume exists
          (e.g. `global` for cluster-wide or `local` for machine level)
        type: "string"

  VolumeConfig:
    description: "config used to create a volume"
    type: "object"
    properties:
      Name:
        description: "The new volume's name. If not specified, Docker generates a name."
        type: "string"
        x-nullable: false
      Driver:
        description: "Name of the volume driver to use."
        type: "string"
        default: "local"
        x-nullable: false
      DriverOpts:
        description: "A mapping of driver options and values. These options are passed directly to the driver and are driver specific."
        type: "object"
        additionalProperties:
          type: "string"
      Labels:
        description: "User-defined key/value metadata."
        type: "object"
        additionalProperties:
          type: "string"
    example:
      Name: "tardis"
      Labels:
        com.example.some-label: "some-value"
        com.example.some-other-label: "some-other-value"
      Driver: "custom"

  VolumeCreateRequest:
    type: "object"
    description: "VolumeCreateRequest contains the response for the remote API: POST /volumes/create"
    properties:
      Name:
        description: "Name is the name of the volume."
        type: "string"
      Driver:
        description: "Driver is the Driver name used to create the volume."
        type: "string"
      DriverOpts:
        description: "DriverOpts holds the driver specific options to use for when creating the volume."
        type: "object"
        additionalProperties:
          type: "string"
      Labels:
        description: "Labels is metadata specific to the volume."
        type: "object"
        additionalProperties:
          type: "string"

  VolumeListResp:
    type: "object"
    required: [Volumes, Warnings]
    properties:
      Volumes:
        type: "array"
        x-nullable: false
        description: "List of volumes"
        items:
          $ref: "#/definitions/VolumeInfo"
      Warnings:
        type: "array"
        x-nullable: false
        description: "Warnings that occurred when fetching the list of volumes"
        items:
          type: "string"

  ExecCreateConfig:
    type: "object"
    properties:
      User:
        type: "string"
        description: "User that will run the command"
      Privileged:
        type: "boolean"
        description: "Is the container in privileged mode"
      Tty:
        type: "boolean"
        description: "Attach standard streams to a tty"
      AttachStdin:
        type: "boolean"
        description: "Attach the standard input, makes possible user interaction"
      AttachStderr:
        type: "boolean"
        description: "Attach the standard error"
      AttachStdout:
        type: "boolean"
        description: "Attach the standard output"
      Detach:
        type: "boolean"
        description: "Execute in detach mode"
      DetachKeys:
        type: "string"
        description: "Escape keys for detach"
      Cmd:
        type: "array"
        description:  "Execution commands and args"
        items:
          type: "string"

  ExecCreateResponse:
    type: "object"
    properties:
      ID:
        type: "string"

  ExecStartConfig:
    type: "object"
    properties:
      Detach:
        type: "boolean"
      Tty:
        type: "boolean"
  
  ContainerJSON:
    type: "object"
    properties:
      Id:
        description: "The ID of the container"
        type: "string"
      Created:
        description: "The time the container was created"
        type: "string"
      Path:
        description: "The path to the command being run"
        type: "string"
      Args:
        description: "The arguments to the command being run"
        type: "array"
        items:
          type: "string"
      State:
        description: "The state of the container."
        $ref: "#/definitions/ContainerState"
      Image:
        description: "The container's image"
        type: "string"
      ResolvConfPath:
        type: "string"
      HostnamePath:
        type: "string"
      HostsPath:
        type: "string"
      LogPath:
        type: "string"
      Name:
        type: "string"
      RestartCount:
        type: "integer"
      Driver:
        type: "string"
      MountLabel:
        type: "string"
      ProcessLabel:
        type: "string"
      AppArmorProfile:
        type: "string"
      ExecIDs:
        type: "string"
      HostConfig:
        $ref: "#/definitions/HostConfig"
      SizeRw:
        description: "The size of files that have been created or changed by this container."
        type: "integer"
        format: "int64"
      SizeRootFs:
        description: "The total size of all the files in this container."
        type: "integer"
        format: "int64"
      Config:
        $ref: "#/definitions/ContainerConfig"

  ContainerState:
    type: "object"
    properties:
      Status:
        $ref: "#/definitions/Status"
      Running:
        description: |
          Whether this container is running.

          Note that a running container can be _paused_. The `Running` and `Paused`
          booleans are not mutually exclusive:

          When pausing a container (on Linux), the cgroups freezer is used to suspend
          all processes in the container. Freezing the process requires the process to
          be running. As a result, paused containers are both `Running` _and_ `Paused`.

          Use the `Status` field instead to determine if a container's state is "running".
        type: "boolean"
      Paused:
        description: "Whether this container is paused."
        type: "boolean"
      Restarting:
        description: "Whether this container is restarting."
        type: "boolean"
      OOMKilled:
        description: "Whether this container has been killed because it ran out of memory."
        type: "boolean"
      Dead:
        description: "Whether this container is dead."
        type: "boolean"
      Pid:
        description: "The process ID of this container"
        type: "integer"
      ExitCode:
        description: "The last exit code of this container"
        type: "integer"
      Error:
        description: "The error message of this container"
        type: "string"
      StartedAt:
        description: "The time when this container was last started."
        type: "string"
      FinishedAt:
        description: "The time when this container last exited."
        type: "string"

  Status:
    description: The status of the container. For example, "running" or "exited".
    type: "string"
    enum: ["created", "running", "stopped","paused", "restarting", "removing", "exited", "dead"]

  GraphDriverData:
    description: "Information about a container's graph driver."
    type: "object"
    required: [Name, Data]
    properties:
      Name:
        type: "string"
        x-nullable: false
      Data:
        type: "object"
        x-nullable: false
        additionalProperties:
          type: "string"

  MountPoint:
    type: "object"
    description: "A mount point inside a container"
    properties:
      Type:
        type: "string"
      Name:
        type: "string"
      Source:
        type: "string"
      Destination:
        type: "string"
      Driver:
        type: "string"
      Mode:
        type: "string"
      RW:
        type: "boolean"
      Propagation:
        type: "string"

  NetworkSettings:
    description: "NetworkSettings exposes the network settings in the API"
    type: "object"
    properties:
      Bridge:
        description: Name of the network'a bridge (for example, `pouch-br`).
        type: "string"
        example: "pouch-br"
      SandboxID:
        description: SandboxID uniquely represents a container's network stack.
        type: "string"
        example: "9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3"
      HairpinMode:
        description: "Indicates if hairpin NAT should be enabled on the virtual interface"
        type: "boolean"
        example: false
      LinkLocalIPv6Address:
        description: "IPv6 unicast address using the link-local prefix"
        type: "string"
        example: "fe80::42:acff:fe11:1"
      LinkLocalIPv6PrefixLen:
        description: Prefix length of the IPv6 unicast address.
        type: "integer"
        example: "64"
      Ports:
        $ref: "#/definitions/PortMap"
      SandboxKey:
        description: SandboxKey identifies the sandbox
        type: "string"
        example: "/var/run/pouch/netns/8ab54b426c38"

      # TODO is SecondaryIPAddresses actually used?
      SecondaryIPAddresses:
        description: ""
        type: "array"
        items:
          $ref: "#/definitions/IPAddress"
        x-nullable: true

      # TODO is SecondaryIPv6Addresses actually used?
      SecondaryIPv6Addresses:
        description: ""
        type: "array"
        items:
          $ref: "#/definitions/IPAddress"
        x-nullable: true
      Networks:
        description: "Information about all networks that the container is connected to"
        type: "object"
        additionalProperties:
          $ref: "#/definitions/EndpointSettings"

  EndpointSettings:
    description: "Configuration for a network endpoint."
    type: "object"
    properties:
      Links:
        type: "array"
        items:
          type: "string"
        example:
          - "container_1"
          - "container_2"
      Aliases:
        type: "array"
        items:
          type: "string"
        example:
          - "server_x"
          - "server_y"
      NetworkID:
        description: "Unique ID of the network.\""
        type: "string"
        example: "08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a"
      EndpointID:
        description: "Unique ID for the service endpoint in a Sandbox"
        type: "string"
        example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
      Gateway:
        description: "Gateway address for this network"
        type: "string"
        example: "172.17.0.1"
      IPAddress:
        description: "IPv4 address"
        type: "string"
        example: "172.17.0.4"
      IPPrefixLen:
        description: "Mask length of the IPv4 address"
        type: "integer"
        example: 16
      IPv6Gateway:
        description: "IPv6 gateway address"
        type: "string"
        example: "2001:db8:2::100"
      GlobalIPv6Address:
        description: "Global IPv6 address"
        type: "string"
        example: "2001:db8::5689"
      GlobalIPv6PrefixLen:
        description: "Mask length of the global IPv6 address"
        type: "integer"
        format: "int64"
        example: 64
      MacAddress:
        description: MAC address for the endpoint on this network"
        type: "string"
        example: "02:42:ac:11:00:04"
      DriverOpts:
        description: "DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific"
        type: "object"
        x-nullable: true
        additionalProperties:
          type: "string"
        example:
          com.example.some-label: "some-value"
          com.example.some-other-label: "some-other-value"

  IPAddress:
    description: Address represents an IPv4 or IPv6 IP address.
    type: "object"
    properties:
      Addr:
        description: IP address.
        type: "string"
      PrefixLen:
        description: Mask length of the IP address.
        type: "integer"

  PortMap:
    description: |
      PortMap describes the mapping of container ports to host ports, using the
      container's port-number and protocol as key in the format `<port>/<protocol>`,
      for example, `80/udp`.

      If a container's port is mapped for both `tcp` and `udp`, two separate
      entries are added to the mapping table.
    type: "object"
    additionalProperties:
      type: "array"
      items:
        $ref: "#/definitions/PortBinding"
    example:
      "443/tcp":
        - HostIp: "127.0.0.1"
          HostPort: "4443"
      "80/tcp":
        - HostIp: "0.0.0.0"
          HostPort: "80"
        - HostIp: "0.0.0.0"
          HostPort: "8080"
      "80/udp":
        - HostIp: "0.0.0.0"
          HostPort: "80"
      "2377/tcp": null

  PortBinding:
    description: "PortBinding represents a binding between a host IP address and a host port"
    type: "object"
    x-nullable: true
    properties:
      HostIp:
        description: "Host IP address that the container's port is mapped to."
        type: "string"
        example: "127.0.0.1"
      HostPort:
        description: "Host port number that the container's port is mapped to."
        type: "string"
        example: "4443"

  ExecConfig:
    description: "Exec configuration"
    type: "object"
    properties:
      AttachStdin:
        type: "boolean"
        description: "Attach to `stdin` of the exec command."
      AttachStdout:
        type: "boolean"
        description: "Attach to `stdout` of the exec command."
      AttachStderr:
        type: "boolean"
        description: "Attach to `stderr` of the exec command."
      DetachKeys:
        type: "string"
        description: "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`."
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY."
      Env:
        description: "A list of environment variables in the form `[\"VAR=value\", ...]`."
        type: "array"
        items:
          type: "string"
      Cmd:
        type: "array"
        description: "Command to run, as a string or array of strings."
        items:
          type: "string"
      Privileged:
        type: "boolean"
        description: "Runs the exec process with extended privileges."
        default: false
      User:
        type: "string"
        description: "The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`."
    example:
      AttachStdin: false
      AttachStdout: true
      AttachStderr: true
      DetachKeys: "ctrl-p,ctrl-q"
      Tty: false
      Cmd:
        - "date"
      Env:
        - "FOO=bar"
        - "BAZ=quux"