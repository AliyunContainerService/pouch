// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerInfo container info
// swagger:model ContainerInfo

type ContainerInfo struct {

	// app armor profile
	AppArmorProfile string `json:"AppArmorProfile,omitempty"`

	// The arguments to the command being run
	Args []string `json:"Args"`

	// config
	Config *ContainerConfig `json:"Config,omitempty"`

	// The time the container was created
	Created string `json:"Created,omitempty"`

	// driver
	Driver string `json:"Driver,omitempty"`

	// exec ids
	ExecIds string `json:"ExecIDs,omitempty"`

	// graph driver
	GraphDriver *GraphDriverData `json:"GraphDriver,omitempty"`

	// host config
	HostConfig *HostConfig `json:"HostConfig,omitempty"`

	// hostname path
	HostnamePath string `json:"HostnamePath,omitempty"`

	// hosts path
	HostsPath string `json:"HostsPath,omitempty"`

	// The ID of the container
	ID string `json:"Id,omitempty"`

	// The container's image
	Image string `json:"Image,omitempty"`

	// log path
	LogPath string `json:"LogPath,omitempty"`

	// mount label
	MountLabel string `json:"MountLabel,omitempty"`

	// mounts
	Mounts []*MountPoint `json:"Mounts"`

	// name
	Name string `json:"Name,omitempty"`

	// network settings
	NetworkSettings *NetworkSettings `json:"NetworkSettings,omitempty"`

	// TODO
	Node interface{} `json:"Node,omitempty"`

	// The path to the command being run
	Path string `json:"Path,omitempty"`

	// process label
	ProcessLabel string `json:"ProcessLabel,omitempty"`

	// resolv conf path
	ResolvConfPath string `json:"ResolvConfPath,omitempty"`

	// restart count
	RestartCount int64 `json:"RestartCount,omitempty"`

	// The total size of all the files in this container.
	SizeRootFs int64 `json:"SizeRootFs,omitempty"`

	// The size of files that have been created or changed by this container.
	SizeRw int64 `json:"SizeRw,omitempty"`

	// state
	State *ContainerInfoState `json:"State,omitempty"`
}

/* polymorph ContainerInfo AppArmorProfile false */

/* polymorph ContainerInfo Args false */

/* polymorph ContainerInfo Config false */

/* polymorph ContainerInfo Created false */

/* polymorph ContainerInfo Driver false */

/* polymorph ContainerInfo ExecIDs false */

/* polymorph ContainerInfo GraphDriver false */

/* polymorph ContainerInfo HostConfig false */

/* polymorph ContainerInfo HostnamePath false */

/* polymorph ContainerInfo HostsPath false */

/* polymorph ContainerInfo Id false */

/* polymorph ContainerInfo Image false */

/* polymorph ContainerInfo LogPath false */

/* polymorph ContainerInfo MountLabel false */

/* polymorph ContainerInfo Mounts false */

/* polymorph ContainerInfo Name false */

/* polymorph ContainerInfo NetworkSettings false */

/* polymorph ContainerInfo Node false */

/* polymorph ContainerInfo Path false */

/* polymorph ContainerInfo ProcessLabel false */

/* polymorph ContainerInfo ResolvConfPath false */

/* polymorph ContainerInfo RestartCount false */

/* polymorph ContainerInfo SizeRootFs false */

/* polymorph ContainerInfo SizeRw false */

/* polymorph ContainerInfo State false */

// Validate validates this container info
func (m *ContainerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGraphDriver(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerInfo) validateArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.Args) { // not required
		return nil
	}

	return nil
}

func (m *ContainerInfo) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateGraphDriver(formats strfmt.Registry) error {

	if swag.IsZero(m.GraphDriver) { // not required
		return nil
	}

	if m.GraphDriver != nil {

		if err := m.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateMounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Mounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Mounts); i++ {

		if swag.IsZero(m.Mounts[i]) { // not required
			continue
		}

		if m.Mounts[i] != nil {

			if err := m.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainerInfo) validateNetworkSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkSettings) { // not required
		return nil
	}

	if m.NetworkSettings != nil {

		if err := m.NetworkSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {

		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("State")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerInfo) UnmarshalBinary(b []byte) error {
	var res ContainerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContainerInfoState The state of the container.
// swagger:model ContainerInfoState

type ContainerInfoState struct {

	// dead
	Dead bool `json:"Dead,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// The last exit code of this container
	ExitCode int64 `json:"ExitCode,omitempty"`

	// The time when this container last exited.
	FinishedAt string `json:"FinishedAt,omitempty"`

	// Whether this container has been killed because it ran out of memory.
	OOMKilled bool `json:"OOMKilled,omitempty"`

	// Whether this container is paused.
	Paused bool `json:"Paused,omitempty"`

	// The process ID of this container
	Pid int64 `json:"Pid,omitempty"`

	// Whether this container is restarting.
	Restarting bool `json:"Restarting,omitempty"`

	// Whether this container is running
	Running bool `json:"Running,omitempty"`

	// The time when this container was last started.
	StartedAt string `json:"StartedAt,omitempty"`

	// The status of the container. For example, running or exited
	Status string `json:"Status,omitempty"`
}

/* polymorph ContainerInfoState Dead false */

/* polymorph ContainerInfoState Error false */

/* polymorph ContainerInfoState ExitCode false */

/* polymorph ContainerInfoState FinishedAt false */

/* polymorph ContainerInfoState OOMKilled false */

/* polymorph ContainerInfoState Paused false */

/* polymorph ContainerInfoState Pid false */

/* polymorph ContainerInfoState Restarting false */

/* polymorph ContainerInfoState Running false */

/* polymorph ContainerInfoState StartedAt false */

/* polymorph ContainerInfoState Status false */

// Validate validates this container info state
func (m *ContainerInfoState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerInfoStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","running","paused","restarting","removing","exited","dead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerInfoStateTypeStatusPropEnum = append(containerInfoStateTypeStatusPropEnum, v)
	}
}

const (
	// ContainerInfoStateStatusCreated captures enum value "created"
	ContainerInfoStateStatusCreated string = "created"
	// ContainerInfoStateStatusRunning captures enum value "running"
	ContainerInfoStateStatusRunning string = "running"
	// ContainerInfoStateStatusPaused captures enum value "paused"
	ContainerInfoStateStatusPaused string = "paused"
	// ContainerInfoStateStatusRestarting captures enum value "restarting"
	ContainerInfoStateStatusRestarting string = "restarting"
	// ContainerInfoStateStatusRemoving captures enum value "removing"
	ContainerInfoStateStatusRemoving string = "removing"
	// ContainerInfoStateStatusExited captures enum value "exited"
	ContainerInfoStateStatusExited string = "exited"
	// ContainerInfoStateStatusDead captures enum value "dead"
	ContainerInfoStateStatusDead string = "dead"
)

// prop value enum
func (m *ContainerInfoState) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, containerInfoStateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContainerInfoState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("State"+"."+"Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerInfoState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerInfoState) UnmarshalBinary(b []byte) error {
	var res ContainerInfoState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
