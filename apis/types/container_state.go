// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContainerState container state
// swagger:model ContainerState

type ContainerState struct {

	// Whether this container is dead.
	Dead bool `json:"Dead,omitempty"`

	// The error message of this container
	Error string `json:"Error,omitempty"`

	// The last exit code of this container
	ExitCode int64 `json:"ExitCode,omitempty"`

	// The time when this container last exited.
	FinishedAt string `json:"FinishedAt,omitempty"`

	// Whether this container has been killed because it ran out of memory.
	OOMKilled bool `json:"OOMKilled,omitempty"`

	// Whether this container is paused.
	Paused bool `json:"Paused,omitempty"`

	// The process ID of this container
	Pid int64 `json:"Pid,omitempty"`

	// Whether this container is restarting.
	Restarting bool `json:"Restarting,omitempty"`

	// Whether this container is running.
	//
	// Note that a running container can be _paused_. The `Running` and `Paused`
	// booleans are not mutually exclusive:
	//
	// When pausing a container (on Linux), the cgroups freezer is used to suspend
	// all processes in the container. Freezing the process requires the process to
	// be running. As a result, paused containers are both `Running` _and_ `Paused`.
	//
	// Use the `Status` field instead to determine if a container's state is "running".
	//
	Running bool `json:"Running,omitempty"`

	// The time when this container was last started.
	StartedAt string `json:"StartedAt,omitempty"`

	// status
	Status Status `json:"Status,omitempty"`
}

/* polymorph ContainerState Dead false */

/* polymorph ContainerState Error false */

/* polymorph ContainerState ExitCode false */

/* polymorph ContainerState FinishedAt false */

/* polymorph ContainerState OOMKilled false */

/* polymorph ContainerState Paused false */

/* polymorph ContainerState Pid false */

/* polymorph ContainerState Restarting false */

/* polymorph ContainerState Running false */

/* polymorph ContainerState StartedAt false */

/* polymorph ContainerState Status false */

// Validate validates this container state
func (m *ContainerState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerState) UnmarshalBinary(b []byte) error {
	var res ContainerState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
