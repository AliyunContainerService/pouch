// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CPUStats CPUStats aggregates and wraps all CPU related info of container
// swagger:model CPUStats
type CPUStats struct {

	// cpu usage
	CPUUsage *CPUUsage `json:"cpu_usage,omitempty"`

	// onine CPUs
	OnlineCpus uint32 `json:"online_cpus,omitempty"`

	// System CPU Usage
	SyetemCPUUsage uint64 `json:"syetem_cpu_usage,omitempty"`

	// throttling data
	ThrottlingData *ThrottlingData `json:"throttling_data,omitempty"`
}

// Validate validates this CPU stats
func (m *CPUStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUStats) validateCPUUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUUsage) { // not required
		return nil
	}

	if m.CPUUsage != nil {
		if err := m.CPUUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu_usage")
			}
			return err
		}
	}

	return nil
}

func (m *CPUStats) validateThrottlingData(formats strfmt.Registry) error {

	if swag.IsZero(m.ThrottlingData) { // not required
		return nil
	}

	if m.ThrottlingData != nil {
		if err := m.ThrottlingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttling_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CPUStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPUStats) UnmarshalBinary(b []byte) error {
	var res CPUStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
